	.title	TESTWD
	.enabl	LC, AMA

C_SCRWID  = 50
C_SCRSIZE = 240.*C_SCRWID

C_ELINE   = 120000
C_VADDR_O = C_ELINE + C_SCRWID
C_VADDR_E = C_VADDR_O + C_SCRSIZE

C_VTAB_O  = 73000
C_VTAB_E  = 75400

C_HEADS   = 16.
C_SECTORS = 63.

	.asect
	.=0

Start:	; boot marker and skip space (!) used by wd resident
	nop
	br	St200
	.ascii	"BAAP"

	.=200
St200:	; start PPU code
	mtps	#200
	mov	#1000, SP
	call	PPSen				; exec allocate
	movb	#20, PPCmd			; 20 - write
	mov 	#PpuStart, PPAcp
	call	PPSen
	movb	#30, PPCmd			; 30 - run
	call	PPSen
	; and that's all for CPU
	br	.

PPmsg:	.word	PPArr				; beginning of array addr
        .word	177777
PPArr:	.byte	0				; 23334 return value (0 - OK)
PPCmd:	.byte	1				; 23335 command
PPDev:	.word	32				; 23336 device type (32-ppu mem)
PPApp:	.word	0				; 23340 argument(s) (PPU addr for mem operations)
PPAcp:	.word	BootEnd-PpuStart/2		; 23342 CPU addr (length in words for mem allocate)
PPLen:	.word	BootEnd-PpuStart/2		; 23344 length in words

; send command to PPU
PPSen:	mov	#PPMsg, R2
	mov	#5, R3
	br	20$
10$:	movb	(R2)+, @#176676
20$:	tstb	@#176674
	bpl	20$
	sob	R3, 10$
	return

; //////////////////////////////////////////////////////////////////////////////
; // PPU boot code
; //////////////////////////////////////////////////////////////////////////////

PpuStart:
	mtps	#200
	mov	#500, R0
	clr	(R0)+
	clr	(R0)+
	clr	(R0)+
	mov	#506, (R0)
	mov	#506, @#272			; prevent screen showing trash
	; setup memory on addrs 100000+
	bic	#1, @#177054			; allow 100000-117777 window
	bis	#^B11100000, @#177054		; allow RAM on addrs 120000+
	; read sectors from 3rd ... our main code is there
	mov	#110016, R5			; 110016 data port addr
	mov	#110014, R4			; 110014 error code 
	mov	#^C<End-1000/1000+1>, -(R4)	; 110012 read sectors count
	mov	#^C3, -(R4)			; 110010 sector #3
	mov	#^C0, -(R4)			; 110006 cylinder # low byte
	mov	#^C0, -(R4)			; 110004 cylinder # high byte
	mov	#^C240, -(R4)			; 110002 head # (1010xxxx)	
	mov	#^C40, -(R4)			; 110000 command 0x20 - read sectors
	mov	#1000, R0			; where to read
	mov	#End-1000/2, R3			; length in words
10$:	bit	#^B1000, (R4)			; test command port
	bne	10$				; not ready
	mov	(R5), (R0)+			; get data
	sob	R3, 10$
	; jump to main code
	mov	#1000, SP
	jmp	(SP)
BootEnd:

	.if LT 1000-.
	.error first block addr limit exceeded
	.endc

; //////////////////////////////////////////////////////////////////////////////
; // PPU main code
; //////////////////////////////////////////////////////////////////////////////

	.asect
	.=1000

	; clear high addrs
	mov	#End, R0
	mov	#100000-End/2, R1
	clr	(R0)+
	sob	R1, .-2
	; clear screen
	call	ClearScreen
	; setup screens
	mov	#C_VTAB_O, R0
	mov	#C_VADDR_O, R1
	call	SetVLines
	mov	#C_VTAB_E, R0
	mov	#C_VADDR_E, R1
	call	SetVLines			; returns R0 - 'addr' for @#272
	clr	@#270
	mov	R0, @#272
	; clear low addrs except 0272
	clr	R0
	mov	#2, (R0)+
	clr	(R0)+
	mov	#500-4/4, R3
10$:	clr	(R0)+
	cmp	R0, #272
	bne	20$
	tst	(R0)+
	br	30$
20$:	mov	#200, (R0)+
30$:	sob	R3, 10$
	mov	#1000-500/2, R3
	clr	(R0)+
	sob	R3, .-2

	; vsync, keyboard, lpt
	mov	#VsyInt, @#100	
	bic	#^B0100000000, @#177054		; allow vsync in PPU
	mov	#KeyInt, @#300
	clr	@#302				; (!) need for reentry into key int
	bis	#100, @#177700			; allow keyboard int
	mov	#177, @#177103			; all LPT ports to output

	; check for new covox on 177372
	mov	#PpInt4, @#4
	clr	R0
	mov	#^xFF, @CovoxPort		; test new covox port
	tst	R0
	beq	40$
	mov	#177100, CovoxPort		; audio port - LPT A
40$:	clr	@#4

	; all is set then, go
	mtps	#0

; rendering video from start
Render:	call	ClearScreen

	; setup first track reading
	mov	#1, CurTrack			; 4 low bits is head #
	clr	@#77776				; addr used for 'end of video' mark
	; set CHS mode first of all
	mov	CurTrack, R0
	bic	#^B1111111111110000, R0
	bis	#^B10100000, R0
	com	R0
	mov	R0, @#110002			; 110002 head #
	; set other IDE values
	mov	#110016, R5			; 110016 data port addr
	mov	#110014, R4			; 110014 error addr
	mov	#^C<C_SECTORS>, -(R4)		; 110012 sectors count to read
	mov	#^C1, -(R4)			; 110010 sector #1
	mov	CurTrack, R0
	ash	#-4, R0
	com	R0
	mov	R0, -(R4)			; 110006 cylinder # low byte
	swab	R0
	mov	R0, -(R4)			; 110004 cylinder # high byte
	sub	#2, R4				; 110002 CHS & head # already set
	mov	#^C40, -(R4)			; 110000 command 0x20 read sectors
	; wait for BSY
	tstb	(R4)
	bpl	.-2
	; wait for DRDY
	bit	#^B01000000, (R4)
	bne	.-4

	call	WaitVsync
	mov	CovoxPort, R3
	; R3 - audio port
	; R4 - IDE control port
	; R5 - IDE data port

; tracks reading cycle
;
Track:	; sectors reading
	mov	#C_SECTORS-1, R1		; 44T
Sector:	bit	#^B00001000, (R4)		; 68T DRQ
	bne	.-4				; 20T
	mov	#17., R2			; 44T
10$:	mov	(R5), (R3)			; > 52T	- audio
	mov	(R5), @(R5)			; > 92T	+ video
	mov	(R5), @(R5)			; > 92T	+ video
	mov	(R5), (R3)			; > 52T		timings for IDE/audio port is less than RAM (8T each read/write)
	mov	(R5), @(R5)			; > 92T
	mov	(R5), @(R5)			; > 92T
	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	mov	(R5), @(R5)			; > 92T
	sob	R2, 10$				; 40T
	mov	(R5), (R3)			; > 52T
	sob	R1, Sector			; 40T		
	; read last sector (not fully)
	bit	#^B00001000, (R4)		; 68T DRQ
	bne	.-4				; 20T
	mov	#16., R2			; 44T
20$:	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	mov	(R5), @(R5)			; > 92T
	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	mov	(R5), @(R5)			; > 92T
	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	mov	(R5), @(R5)			; > 92T
	sob	R2, 20$				; 40T
	; check for the end of video
	tst	@#77776				; 64T
	bne	Render				; 20T
	; (!) still have 16 words to read
	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	; advance track (and read rest of last sector)
	inc	CurTrack			; 80T
	mov	#110014, R4			; 44T	110014 error data
	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	mov	#^C<C_SECTORS>, -(R4)		; 68T	110012 read sectors count
	mov	#^C1, -(R4)			; 68T	110010 sector #1
	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	mov	CurTrack, R0			; 64T	
	mov	(R5), (R3)			; > 52T
	asr	R0				; 20T
	asr	R0				; 20T
	asr	R0				; 20T
	asr	R0				; 20T
	com	R0				; 20T
	mov	R0, -(R4)			; 44T	110006 cylinder low byte
	mov	(R5), (R3)			; > 52T
	mov	(R5), @(R5)			; > 92T
	swab	R0				; 20T
	mov	R0, -(R4)			; 44T	110004 cylinder high byte
	mov	(R5), (R3)			; > 52T
	mov	CurTrack, R0			; 64T
	bic	#^B1111111111110000, R0		; 44T
	mov	(R5), (R3)			; > 52T
	bis	#^B0000000010100000, R0		; 44T
	com	R0				; 20T
	mov	R0, -(R4)			; 44T	110002 head # (1010xxxx)
	mov	(R5), (R3)			; > 52T
	mov	#^C40, -(R4)			; 68T	110000 command 0x20 - read sectors
	tstb	(R4)				; 44T	BSY
	bpl	.-2				; 20T
	jmp	Track				; 52T

; //////////////////////////////////////////////////////////////////////////////
; // Data, utils
; //////////////////////////////////////////////////////////////////////////////

CovoxPort:	.word	177372			; new covox addr
CurTrack:	.word	0

; int 4 for testing registers
PpInt4:	inc	R0
	rti

; vsync interrupt
VsyInt:	inc	(PC)+
VsyCnt:	.word	0
	rti

; keyboard interrupt - pause/continue
KeyInt:	tstb	@#177702
	bmi	99$
	com	#000000
	beq	90$
	br	.
90$:	add	#4, SP
99$:	rti

; wait for #2 vsync (1/25)
WaitVsync:
	cmp	VsyCnt, #2
	blo	WaitVsync
	clr	VsyCnt
	return

; clear both screens data
ClearScreen:
	mov	#C_ELINE, R0
	mov	#481.*20., R3
	clr	(R0)+
	sob	R3, .-2
	return

; setup vlines table
; R0 - addr for it, R1 - vaddr
SetVLines:
	bic	#7, R0				; R0 - line table start addr
	mov	R0, -(SP)			; save it
	bis	#6, (SP)			; +6 means first line descriptor have color
	mov	#^B1111100011111000, (R0)+ 	; YRGB YRGB YRGB YRGB for colors 1st part
	mov	#^B1111100011111000, (R0)+	; YRGB YRGB YRGB YRGB for colors 2nd part
	clr	(R0)+				; vaddr not used for first 18 lines
	mov	R0, (R0)
	add	#2, (R0)
	bis	#2, (R0)+			; +2 means next line is scale&cursor
	mov	#^B0000000000010000, (R0)+	; black colored graph cursor
	mov	#^B0000000000010111, (R0)+	; max luminance (xxxDDxBGR, DD: 00-640, 01-320, 10-160, 11-80)
	clr	(R0)+				; vaddr still not needed
	mov	R0, (R0)
	add	#2, (R0)+			; +0 means next line is 2-word descriptor
	; 16.+24. empty lines
	mov	#16.+24., R3
10$:	mov	#C_ELINE, (R0)+			; empty line addr
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 10$
	; 240. main lines
	mov	#240., R3
20$:	mov	R1, (R0)+			; put vaddr
	mov	R0, (R0)			; put next element addr
	add	#2, (R0)+
	add	#C_SCRWID, R1			; advance vaddr
	sob	R3, 20$
	; 24. footer empty lines
	mov	#24., R3
30$:	mov	#C_ELINE, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 30$
	; return addr to lines table in R0
	mov	(SP)+, R0
	return

End:
	.end	Start
