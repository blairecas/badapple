	.title	DMAIN
	.enabl	LC

	.asect
	.=0

Start:	nop					; needed opcode
	swab	R0				; high byte - FD#, bottom side
	mov	R0, PPDev
	call	PPSen
	jmp	(SP)

; PPU message
PPmsg:	.word	PPArr				; beginning of array addr
        .word	177777
PPArr:	.byte	0				; 23334 return value (0 - OK)
PPCmd:	.byte	10				; 23335 command (10 - read)
PPDev:	.word	0				; 23336 device type (0x-FD, 32-ppu mem)
PPApp:	.word	1000				; 23340 argument(s) (PPU addr for mem operations)
PPAcp:	.word	1000				; 23342 CPU addr (length in words for mem allocate)
PPLen:	.word	End-1000/2			; 23344 length in words
; PPCmd: 10 - read, 20 - write, 30 - format
; PPDev: word [FD#, bit7 = 0 - bottom side] [0x - FD, 01 - one side only]
; PPApp: word [sector #] [track #] sectors start from 1, tracks from 0

; send command to PPU
PPSen:	mov	#PPMsg, R2
	mov	#5, R3
	br	20$
10$:	movb	(R2)+, @#176676
20$:	tstb	@#176674
	bpl	20$
	sob	R3, 10$
	return

	.if LT 700-.				; leave some space for stack
	.error first block addr limit exceeded
	.endc

; //////////////////////////////////////////////////////////////////////////////
; // Main code
; //////////////////////////////////////////////////////////////////////////////

C_SCRWID	= 80.				; real width (in bytes)
C_VADDR		= 100000			; real addr (not /2)
C_ELINE		= C_VADDR-C_SCRWID		; empty line for top/bottom borders

C_BUFLEN	= 10240.
C_BUFA		= PpuStart + 20 & ^B1111111111110000
C_BUFENDA	= C_BUFLEN + C_BUFA
C_BUFB		= C_BUFENDA
C_BUFENDB	= C_BUFLEN + C_BUFB

	.asect
	.=1000

Main:	mov	R0, PpuFdN			; put FD# for later use in PPU
	; clean high addrs (to be sure vram is cleared before setting video lines)
	mov	#End, R0
	mov	#160000-End/2, R3
	clr	(R0)+
	sob	R3, .-2
	; start PPU code
	mov	#32, PPDev			; device is PPU memory
	movb	#1, PPCmd			; command - allocate
	mov	#End-PpuStart/2, PPAcp		; length in words (for allocate it must be here, not in PPLen!)
	call	PPSen
	movb	#20, PPCmd			; command - write to
	mov 	#PpuStart, PPAcp		; mem addr in CPU
	mov	#End-PpuStart/2, PPLen
	call	PPSen
	movb	#30, PPCmd			; command - run code
	call	PPSen
	call	WaitPpu				; wait for PPU to finish init
	; set up low addrs
	clr	R0
	mov	#2, (R0)+			; RTI opcode
	clr	(R0)+
	mov	#500-4/4, R3
10$:	clr	(R0)+
	mov	#200, (R0)+
	sob	R3, 10$

	; set vsync int
	mov	#VsyInt, @#100
	; all is set, here we go..
	mtps	#0

Render:	; pre reading two buffers
	call	WaitPpu
	mov	#3, PpuComm			; set track to #0
	call	WaitPpu
	mov	#1, PpuComm			; read buffer A
	call	WaitPpu
	mov	#2, PpuComm			; read buffer B
	call	WaitPpu
	mov	#C_BUFA, R5
10$:	; screen starts
	call	WaitVsync
	mov	#CharsTable, R4
20$:	; skip chars number
	movb	(R5)+, R0
	beq	50$				; end of screen
	bpl	30$				; 1-byte skip length
	com	R0
	swab	R0
	bisb	(R5)+, R0			; 2-bytes skip length
30$:	dec	R0
	asl	R0
	add	R0, R4
40$:	; draw chars
	movb	(R5)+, R0			; R0 - character # (negative marks last one in sequence)
	movb	(R5), R2			; maybe draw repeat byte
	movb	RepTable(R2), R2		;
	beq	42$				; no repeat, draw once
	inc	R5				; skip repeat byte then
42$:	inc	R2				; inc repeat number for sob
	ash	#3, R0				; to tile offset
48$:	mov	(R4)+, R1
	mov	TilesData+00(R0), 00*C_SCRWID(R1)
	mov	TilesData+02(R0), 01*C_SCRWID(R1)
	mov	TilesData+04(R0), 02*C_SCRWID(R1)
	mov	TilesData+06(R0), 03*C_SCRWID(R1)
	sob	R2, 48$
	tst	R0				; last char in sequence?
	bge	40$				; no
	br	20$
50$:	tstb	(R5)				; end of buffer?
	bne	10$				; no, go to next screen
	; end of buffer, switch them
	inc	R5
	movb	(R5), R0			; track# bits
	beq	Render				; end of video
	bic	#^B1111111111111110, R0
	asl	R0
	mov	BufTable(R0), R5
	call	WaitPpu
	mov	TrkTable(R0), PpuComm		; 1 - read buf A, 2 - read buf B
	br	10$

BufTable:	.word	C_BUFA, C_BUFB
TrkTable:	.word	2, 1


; vsync interrupt in CPU
VsyInt:	inc	(PC)+
VsyCnt:	.word	0
	rti


; just wait for sync
WaitVSync:
	cmp	VSyCnt, #2
	blo	WaitVSync
	clr	VSyCnt
	return


; wait for PPU to finish command
WaitPpu:
	tst	PpuComm
	bne	WaitPpu
	return


; print something with channel 0
PriStr:	movb	(R0)+, R1
	beq	99$
	tstb	@#177564
	bpl	.-4
	movb	r1, @#177566
	br	PriStr
99$:	return 


PpuComm:	.word	177777
BufExch:	.blkw	10

	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 200
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 210
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 220
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 230
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 240
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 250
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 260
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 270
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 300
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 310
	.byte	000, 000, 001, 002, 003, 004, 005, 006		; 320
	.byte	007, 010, 011, 012, 013, 014, 015, 016		; 330
	.byte	017, 020, 021, 022, 023, 024, 025, 026		; 340
	.byte	027, 030, 031, 032, 033, 034, 035, 036		; 350
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 360
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 370
RepTable:
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 000
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 010
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 020
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 030
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 040
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 050
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 060
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 070
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 100
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 110
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 120
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 130
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 140
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 150
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 160
	.byte	000, 000, 000, 000, 000, 000, 000, 000		; 170


@include inc_tables.mac
	.even

@include inc_graphics.mac
	.even

; //////////////////////////////////////////////////////////////////////////////
; // PPU code
; //////////////////////////////////////////////////////////////////////////////

PpuStart:
	mtps	#200
	; setup own lines table
	mov	PC, R0
	add	#PpuLines-., R0			; get addr of lines table (must be 8-bytes aligned)
	add	#10, R0				; align it
	bic	#7, R0				; R0 - line table start addr
	mov	R0, -(SP)			; save it
	bis	#6, (SP)			; +6 means first line descriptor have lumi&color
	mov	#^B1111111110001000, (R0)+ 	; YRGB YRGB YRGB YRGB for colors 1st part
	mov	#^B1111111101110111, (R0)+	; YRGB YRGB YRGB YRGB for colors 2nd part
	clr	(R0)+				; vaddr not used for first 18 lines
	mov	R0, (R0)
	add	#2, (R0)
	bis	#2, (R0)+			; +2 means next line is scale&cursor
	mov	#^B0000000000010000, (R0)+	; black colored graph cursor
	mov	#^B0000000000010111, (R0)+	; x640, max luminance (xxxDDxBGR, DD: 00-640, 01-320, 10-160, 11-80)
	clr	(R0)+				; vaddr still not needed
	mov	R0, (R0)
	add	#2, (R0)+			; +0 means next line is 2-word descriptor
	; 16.+24. empty lines
	mov	#16.+24., R3
10$:	mov	#C_ELINE/2, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 10$
	; 240. main lines
	mov	#C_VADDR/2, R1			; vaddr to normal ram 100000..
	mov	#60., R3
20$:	mov	R1, (R0)+			; put vaddr
	mov	R0, (R0)			; put next element addr
	add	#2, (R0)+
	add	#C_SCRWID/2, R1			; advance vaddr
	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sub	#C_SCRWID/2, R1			; advance vaddr
	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	add	#C_SCRWID/2, R1			; advance vaddr
	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	add	#C_SCRWID/2, R1			; advance vaddr
	sob	R3, 20$
	; 24. footer empty lines
	mov	#24., R3
30$:	mov	#C_ELINE/2, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 30$
	; all lines are set - switch video to them
	clr	@#270
	mov	(SP)+, @#272

	; prepare FD tracks reading
	mov	#BufExch/2, @#23200
	mov	PpuFdN, @#23336			; FD#

	; ok lets go
	mtps	#0

; signal to CPU that we are finished command execution
PpuDone:
	mov	#PpuComm/2, @#177010
	clr	@#177014

; main PPU cycle
10$:	mov	#PpuComm/2, @#177010		; check do we need to do something?
	mov	@#177014, R0
	beq	10$
	asl	R0
	add	R0, PC
	halt
	br	PpuReadA
	br	PpuReadB
	br	PpuTrack0

; 1 - read buffer A
PpuReadA:
	mov	#C_BUFA, @#23342
	br 	PpuRead

; 2 - read buffer B
PpuReadB:
	mov	#C_BUFB, @#23342

; common read procedure
PpuRead:
	mov	#4377, @#23334			; [10 - read] [377]
	incb	@#23340				; increase track #
	movb	#1, @#23341			; sector #1
	mov	#C_BUFLEN/2, @#23344		; length in words
	; track 80? well done blaire ..
	cmpb	@#23340, #120
	bhis	PpuDone
	;
        call    @#176376       			; Останов программируемого таймера
        jsr     R5, @#134210      		; Запуск таймера с последующим вызовом п/п
        .word   10, 131224, 107  		; по адресу 131224
	;
20$:	; wait for result
	movb	@#23334, R0
	beq	PpuDone
	cmpb	#377, R0
	beq	20$
	; error
	mtps	#200
	; stop CPU
	bis	#20, @#177716
	bis	#40, @#177716			; set ACLO, DCLO (bits: 4-CPU HALT mode, 5-CPU stop)
30$:	; draw error
	mov	PC, R2
	add	#MsgEr2-., R2
	call	PpuPutOctal
	call	PpuClrScr
	mov	PC, R0
	add	#MsgEr1-., R0
	mov	#C_VADDR/2, R1
	call	PpuPriStr
	br	.

; 3 - set track 0 (also print hello message)
PpuTrack0:
	clrb	@#23340				; set track #0
	call	PpuClrScr
	mov	PC, R0
	add	#MsgHlo-., R0
	mov	#50.*C_SCRWID+C_VADDR+20./2, R1
	call	PpuPriStr
	mov	#5, R1
10$:	clr	R0
	sob	R0, .
	sob	R1, 10$	
	call	PpuClrScr
	br	PpuDone


PpuFdN:	.word	0				; FD# taken after boot
MsgEr1:	.ascii	"FD read error: "
MsgEr2:	.asciz	"000000"
MsgHlo:	.asciz	"Bad Apple (no music)"
	.even


; ppu clear screen planes 1,2
PpuClrScr:
	mov	#C_VADDR/2, @#177010
	mov	#120.*C_SCRWID/2, R3	
10$:	clr	@#177014
	inc	@#177010
	sob	R3, 10$
	return

C_FONT_ADDR	= 117430
C_FONT_DY	= 11.

; 117430 - addr of 0x00 character in ROM, font is 11. bytes per character, KOI8R
; R0 - string addr, R1 - vaddr/2
PpuPriStr:
	mov	R2, -(SP)
	mov	R4, -(SP)
	mov	R5, -(SP)
	mov	#177010, R4
	mov	#177014, R5
	mov	R1, (R4)
	mov	#C_SCRWID/2, R2
10$:	movb	(R0)+, R1
	beq	20$
	bic	#^B1111111100000000, R1
	mul	#C_FONT_DY, R1
	add	#C_FONT_ADDR, R1
	.rept	C_FONT_DY
	movb	(R1)+, (R5)
	add	R2, (R4)
	.endr
	sub	#C_FONT_DY*C_SCRWID/2-1, (R4)
	br	10$
20$:	mov	(R4), R1
	mov	(SP)+, R5
	mov	(SP)+, R4
	mov	(SP)+, R2
	return

; put octal number in R0 to (R2)+
PpuPutOctal:
	mov	#6, R3
	clr	R1
	br	20$
10$:	clr	R1
	rol	R0
	rol	R1
	rol	R0
	rol	R1
20$:	rol	R0
	rol	R1
	add	#'0, R1
	movb	R1, (R2)+
	sob	R3, 10$
	return

PpuLines:	
	.blkb	288.+16.*4.+16.+16.

	.if LT 10238.-.
	.error total program limit exceeded
	.endc

	.=10238.
	.word	123456
End:

	.end	Start